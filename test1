import pygame
import sys
import random

# Define some colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)

# Initialize Pygame
pygame.init()

# Set up the display
width, height = 600, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Sudoku Puzzle Generator")

# Set up fonts
font = pygame.font.Font(None, 36)

# Sudoku puzzle generator function
def generate_puzzle(difficulty_level):
    puzzle = [[0 for _ in range(9)] for _ in range(9)]
    solve_puzzle(puzzle)
    remove_cells(puzzle, difficulty_level)
    return puzzle

# Solve the Sudoku puzzle using backtracking
def solve_puzzle(puzzle):
    empty_cell = find_empty_cell(puzzle)
    if not empty_cell:
        return True  # Puzzle solved successfully

    row, col = empty_cell

    for num in range(1, 10):
        if is_safe(puzzle, row, col, num):
            puzzle[row][col] = num

            if solve_puzzle(puzzle):
                return True  # If the current configuration leads to a solution

            puzzle[row][col] = 0  # Backtrack if the current configuration doesn't work

    return False  # No solution found for the current configuration

# Check if placing a number in a certain position is safe
def is_safe(puzzle, row, col, num):
    # Check if the number is not present in the current row and column
    for i in range(9):
        if puzzle[row][i] == num or puzzle[i][col] == num:
            return False

    # Check if the number is not present in the 3x3 subgrid
    subgrid_row, subgrid_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if puzzle[subgrid_row + i][subgrid_col + j] == num:
                return False

    return True

# Find an empty cell in the puzzle
def find_empty_cell(puzzle):
    for i in range(9):
        for j in range(9):
            if puzzle[i][j] == 0:
                return (i, j)
    return None  # No empty cell found

# Remove cells from the puzzle to create the desired difficulty level
def remove_cells(puzzle, difficulty_level):
    cells_to_remove = 81 - difficulty_level
    for _ in range(cells_to_remove):
        row, col = random.randint(0, 8), random.randint(0, 8)
        puzzle[row][col] = 0

# Draw the Sudoku grid
def draw_grid(puzzle):
    cell_size = width // 9

    for i in range(10):
        pygame.draw.line(screen, BLACK, (0, i * cell_size), (width, i * cell_size), 2)
        pygame.draw.line(screen, BLACK, (i * cell_size, 0), (i * cell_size, height), 2)

    for i in range(9):
        for j in range(9):
            if puzzle[i][j] != 0:
                number_text = font.render(str(puzzle[i][j]), True, BLACK)
                screen.blit(number_text, (j * cell_size + 20, i * cell_size + 10))

# Main game loop
def main():
    clock = pygame.time.Clock()

    difficulty_level = 80  # You can adjust the difficulty level

    puzzle = generate_puzzle(difficulty_level)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        screen.fill(WHITE)

        draw_grid(puzzle)

        pygame.display.flip()
        clock.tick(30)

if __name__ == "__main__":
    main()
